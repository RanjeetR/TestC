{"version":3,"sources":["services/ApiService.js","env/constant.js","components/leaderboard/LeaderComponent.js","components/leaderboard/LeaderBoard.js","components/loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["apiRequest","url","param","fetch","constants","scoreUpdatedBY","API_URL","LeaderComponent","options","handleScore","handleScoreUpdation","data","type","elem","score","id","className","leaderName","onClick","bind","LeaderBoard","leaderDetails","useState","leaderData","setLeaderData","msg","updateLeaderData","getScores","method","body","JSON","stringify","headers","then","response","json","sort","a","b","catch","err","console","log","map","element","index","key","Loader","style","position","margin","top","right","bottom","left","width","height","borderRadius","App","setLeaderDetails","useEffect","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ab9288bc.chunk.js","sourcesContent":["/**\n *\n * @param {*} url  api end point\n * @param {*} param options\n */\nconst apiRequest = (url, param) => {\n  return fetch(url, param);\n};\n\n// expose methods, We can add update, delete as well\nexport { apiRequest };\n","const constants = {\n  scoreUpdatedBY: 5,\n  API_URL: \"https://shreeserver.herokuapp.com\"\n};\n\nexport default constants;\n","import React from \"react\";\nimport constants from \"../../env/constant\";\n\nconst LeaderComponent = ({ options, handleScore }) => {\n  const handleScoreUpdation = (data, type, elem) => {\n    if (type === \"plus\") {\n      let score = data.score + constants.scoreUpdatedBY;\n      handleScore({ score, id: data.id });\n    } else {\n      let score =\n        data.score >= constants.scoreUpdatedBY\n          ? data.score - constants.scoreUpdatedBY\n          : data.score;\n      handleScore({ score, id: data.id });\n    }\n  };\n  return (\n    <div className=\"leader\">\n      <div className=\"leader-name\"> {options.leaderName} </div>\n      <div className=\"leader-buttons\">\n        <button\n          className=\"plus-icon\"\n          onClick={handleScoreUpdation.bind(this, options, \"plus\")}\n        >\n          {\" \"}\n        </button>{\" \"}\n        <button\n          className=\"minus-icon\"\n          onClick={handleScoreUpdation.bind(this, options, \"minus\")}\n        >\n          {\" \"}\n        </button>{\" \"}\n      </div>\n      <div className=\"leader-score\">\n        {\" \"}\n        <label>{options.score}</label>{\" \"}\n      </div>\n    </div>\n  );\n};\nexport default LeaderComponent;\n","import React, { useState } from \"react\";\nimport LeaderComponent from \"./LeaderComponent\";\nimport { apiRequest } from \"../../services/ApiService\";\nimport constants from \"../../env/constant\";\nimport \"./leaderboard.scss\";\n\nconst LeaderBoard = ({ leaderDetails }) => {\n  const [leaderData, setLeaderData] = useState(leaderDetails);\n  const handleScore = msg => {\n    let updateLeaderData = getScores(msg);\n    // put request\n    let param = {\n      method: \"PUT\",\n      body: JSON.stringify(msg),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    apiRequest(`${constants.API_URL}/update`, param)\n      .then(response => response.json())\n      .then(data => {\n        if (data) {\n          updateLeaderData.sort((a, b) => b.score - a.score);\n          setLeaderData(updateLeaderData);\n        }\n      })\n      .catch(err => console.log(err));\n  };\n  const getScores = msg => {\n    let updatedLeader = leaderData.map(element => {\n      if (element.id === msg.id) element.score = msg.score;\n      return element;\n    });\n    return updatedLeader;\n  };\n  return (\n    <div className=\"leader-board-app\">\n      {leaderData.map((elem, index) => {\n        return (\n          <LeaderComponent\n            key={elem.id}\n            options={{\n              leaderName: elem.leaderName,\n              score: elem.score,\n              id: elem.id\n            }}\n            handleScore={handleScore}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default LeaderBoard;\n","import React from \"react\";\nimport \"./loader.css\";\nconst Loader = () => {\n  const style = {\n    position: \"absolute\",\n    margin: \"auto\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    width: \"100px\",\n    height: \"100px\",\n    borderRadius: \"3px\"\n  };\n  return (\n    <div style={style}>\n      <div className=\"load-wrapp\">\n        <div className=\"load-3\">\n          <div className=\"line\"></div>\n          <div className=\"line\"></div>\n          <div className=\"line\"></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useEffect, useState } from \"react\";\nimport { apiRequest } from \"./services/ApiService\";\nimport constants from \"./env/constant\";\nimport LeaderBoard from \"./components/leaderboard/LeaderBoard\";\nimport Loader from \"./components/loader/Loader\";\n\nfunction App() {\n  const [leaderDetails, setLeaderDetails] = useState([]);\n  useEffect(() => {\n    let param = {\n      method: \"get\", // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    apiRequest(`${constants.API_URL}/all`, param)\n      .then(response => response.json())\n      .then(data => {\n        data.sort((a, b) => b.score - a.score);\n        setLeaderDetails(data);\n      })\n      .catch(err => console.log(err));\n  }, []);\n  return (\n    <div className=\"App\">\n      {leaderDetails && leaderDetails.length ? (\n        <LeaderBoard leaderDetails={leaderDetails} />\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}